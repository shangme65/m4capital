// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  country       String?
  accounts      Account[]
  sessions      Session[]

  // M4Capital specific fields
  role          UserRole  @default(USER)
  accountType   AccountType @default(INVESTOR)
  portfolio     Portfolio?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
}

enum AccountType {
  INVESTOR
  TRADER
}

model Portfolio {
  id      String @id @default(cuid())
  userId  String @unique
  user    User   @relation(fields: [userId], references: [id])
  balance Decimal @default(0.00)

  assets     Json      @default("[]") // [{ "symbol": "BTC", "amount": 0.5 }, { "symbol": "ETH", "amount": 10 }]
  deposits   Deposit[]
  withdrawals Withdrawal[]
}

model Deposit {
  id        String   @id @default(cuid())
  portfolioId String
  portfolio Portfolio @relation(fields: [portfolioId], references: [id])
  amount    Decimal
  currency  String
  status    String   @default("PENDING") // PENDING, COMPLETED, FAILED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Withdrawal {
  id          String   @id @default(cuid())
  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  amount      Decimal
  currency    String
  status      String   @default("PENDING") // PENDING, COMPLETED, FAILED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}