// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  country       String?
  accounts      Account[]
  sessions      Session[]

  // M4Capital specific fields
  role          UserRole  @default(USER)
  accountType   AccountType @default(INVESTOR)
  portfolio     Portfolio?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
}

enum AccountType {
  INVESTOR
  TRADER
}

model Portfolio {
  id      String @id @default(cuid())
  userId  String @unique
  user    User   @relation(fields: [userId], references: [id])
  balance Decimal @default(0.00)

  assets     Json      @default("[]") // [{ "symbol": "BTC", "amount": 0.5 }, { "symbol": "ETH", "amount": 10 }]
  deposits   Deposit[]
  withdrawals Withdrawal[]
}

model Deposit {
  id            String   @id @default(cuid())
  portfolioId   String
  portfolio     Portfolio @relation(fields: [portfolioId], references: [id])
  amount        Decimal
  currency      String
  status        String   @default("PENDING") // PENDING, COMPLETED, FAILED
  type          String?  // CRYPTO, CARD, BANK_TRANSFER
  transactionId String?  // External transaction ID
  metadata      Json?    @default("{}")  // Additional payment data
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Withdrawal {
  id            String   @id @default(cuid())
  portfolioId   String
  portfolio     Portfolio @relation(fields: [portfolioId], references: [id])
  amount        Decimal
  currency      String
  status        String   @default("PENDING") // PENDING, COMPLETED, FAILED
  type          String?  // CRYPTO, CARD, BANK_TRANSFER
  transactionId String?  // External transaction ID
  metadata      Json?    @default("{}")  // Additional payment data
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Telegram Bot Features
model TelegramUser {
  id                String   @id @default(cuid())
  telegramId        BigInt   @unique
  username          String?
  firstName         String?
  lastName          String?
  languageCode      String   @default("en")
  isBot             Boolean  @default(false)
  isPremium         Boolean  @default(false)
  
  // Settings
  preferredLanguage String   @default("en")
  timezone          String?
  notifications     Boolean  @default(true)
  
  // Moderation
  warningCount      Int      @default(0)
  isBanned          Boolean  @default(false)
  bannedAt          DateTime?
  bannedReason      String?
  
  // Stats
  messageCount      Int      @default(0)
  lastMessageAt     DateTime?
  joinedAt          DateTime @default(now())
  
  // Relations
  watchlists        CryptoWatchlist[]
  priceAlerts       PriceAlert[]
  statistics        UserStatistics[]
  scheduledMessages ScheduledMessage[]
  files             FileStorage[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([telegramId])
  @@index([username])
}

model CryptoWatchlist {
  id            String       @id @default(cuid())
  userId        String
  user          TelegramUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  symbol        String       // bitcoin, ethereum, etc
  displayName   String       // Bitcoin, Ethereum, etc
  addedAt       DateTime     @default(now())
  
  @@unique([userId, symbol])
  @@index([userId])
}

model PriceAlert {
  id            String       @id @default(cuid())
  userId        String
  user          TelegramUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  symbol        String       // bitcoin, ethereum, etc
  targetPrice   Decimal
  condition     String       // ABOVE, BELOW
  isActive      Boolean      @default(true)
  triggered     Boolean      @default(false)
  triggeredAt   DateTime?
  
  chatId        BigInt       // Where to send alert
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  @@index([userId])
  @@index([symbol, isActive])
}

model UserStatistics {
  id                  String       @id @default(cuid())
  userId              String
  user                TelegramUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  date                DateTime     @default(now())
  messagesCount       Int          @default(0)
  imagesGenerated     Int          @default(0)
  cryptoQueriesCount  Int          @default(0)
  commandsUsed        Json         @default("{}") // {"imagine": 5, "price": 10}
  
  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

model ScheduledMessage {
  id            String       @id @default(cuid())
  userId        String
  user          TelegramUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  chatId        BigInt
  message       String       @db.Text
  scheduledFor  DateTime
  sent          Boolean      @default(false)
  sentAt        DateTime?
  
  recurring     Boolean      @default(false)
  recurringType String?      // DAILY, WEEKLY, MONTHLY
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  @@index([scheduledFor, sent])
  @@index([userId])
}

model FileStorage {
  id            String       @id @default(cuid())
  userId        String
  user          TelegramUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  fileId        String       @unique // Telegram file ID
  fileType      String       // photo, document, voice, video
  fileName      String?
  fileSize      Int?
  mimeType      String?
  
  extractedText String?      @db.Text
  metadata      Json?        @default("{}")
  
  uploadedAt    DateTime     @default(now())
  
  @@index([userId])
  @@index([fileType])
}

model ModerationRule {
  id            String   @id @default(cuid())
  
  keyword       String
  action        String   // WARN, BAN, DELETE
  severity      String   // LOW, MEDIUM, HIGH
  isActive      Boolean  @default(true)
  
  caseSensitive Boolean  @default(false)
  isRegex       Boolean  @default(false)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([isActive])
}

model TradingSignal {
  id            String   @id @default(cuid())
  
  symbol        String   // BTC, ETH, etc
  action        String   // BUY, SELL, HOLD
  price         Decimal
  targetPrice   Decimal?
  stopLoss      Decimal?
  confidence    Decimal  // 0-1
  
  analysis      String   @db.Text
  indicators    Json     @default("{}") // RSI, MACD, etc
  
  isActive      Boolean  @default(true)
  expiresAt     DateTime?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([symbol, isActive])
  @@index([createdAt])
}

model Quiz {
  id            String   @id @default(cuid())
  
  title         String
  description   String?  @db.Text
  questions     Json     // [{question: "", options: [], correct: 0}]
  
  chatId        BigInt?
  messageId     BigInt?
  
  isActive      Boolean  @default(true)
  responses     Json     @default("[]") // [{"userId": 123, "answers": [0,1,2]}]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([isActive])
}

model NewsArticle {
  id            String   @id @default(cuid())
  
  title         String
  description   String?  @db.Text
  url           String
  source        String
  category      String   // CRYPTO, FINANCE, GENERAL
  
  publishedAt   DateTime
  sentiment     String?  // POSITIVE, NEGATIVE, NEUTRAL
  
  createdAt     DateTime @default(now())
  
  @@index([category])
  @@index([publishedAt])
}
